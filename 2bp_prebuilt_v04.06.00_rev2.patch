diff --git boards/Host/Rhodes4/UWB_DeviceConfig_SR1XX.h boards/Host/Rhodes4/UWB_DeviceConfig_SR1XX.h
index 3cb1a49..8193d84 100644
--- boards/Host/Rhodes4/UWB_DeviceConfig_SR1XX.h
+++ boards/Host/Rhodes4/UWB_DeviceConfig_SR1XX.h
@@ -77,10 +77,13 @@
 /* clang-format off */
 const uint8_t phNxpUciHal_core_configs[] =
 {
-    0x12, 0x20, 0x04, 0x00, 0x0E, 0x03,
+    0x20, 0x20, 0x04, 0x00, 0x1C, 0x06,
+    0x01, 0x01, 0x01,
     0xE4, 0x02, 0x01, 0x00,
     0xE4, 0x03, 0x01, 0x14,
-    0xE4, 0x34, 0x02, 0xE8, 0x03,
+    0xE4, 0x04, 0x02, 0xF4, 0x01,
+    0xE4, 0x28, 0x04, 0x2F, 0x2F, 0x2F, 0x00,
+    0xE4, 0x33, 0x01, 0x01,
 };
 
 #if USE_NAKED_BOARD
@@ -97,99 +100,35 @@ const uint8_t phNxpUciHal_core_configs[] =
 
 const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel5[] =
 {
-/* Over All Length */ 4 + ( 3 + (1 + 3*AD_N_RX_ENTRIES(3))),
-/* Set Calib */ 0x2F, 0x21,
-/* Length */ 0,  3 + (1 + 3*AD_N_RX_ENTRIES(3)),
-/* Channel */ AD_CALIB_CN(5),
-/* GD Calib */ AD_CALIB_CMD_GD,
-/* Length */ 1 + 3*AD_N_RX_ENTRIES(3),
-/* N Entries */ AD_N_RX_ENTRIES(3),
-
-/* GD Calib: Keep */ AD_RX_ID(1), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Keep */ AD_RX_ID(2), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Keep */ AD_RX_ID(3), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(4), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(5), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(6), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(7), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(8), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(9), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(10), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(11), AD_CALIB_GD(GROUP_DELAY_CH5),
-/* GD Calib: Skip */ //  AD_RX_ID(12), AD_CALIB_GD(GROUP_DELAY_CH5),
+    0x14,
+    0x2F, 0x21, 0x00, 0x10, 
+    0x05, 
+    0x02,
+    0x0D,
+    0x04,
+    0x01, 0xE6, 0x3A,
+    0x02, 0xE6, 0x3A,
+    0x03, 0xE6, 0x3A,
+    0x04, 0xE6, 0x3A,
 };
 
 const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel9[] =
 {
-/* Over All Length */ 4 + ( 3 + (1 + 3*AD_N_RX_ENTRIES(3))),
-/* Set Calib */ 0x2F, 0x21,
-/* Length */ 0,  3 + (1 + 3*AD_N_RX_ENTRIES(3)),
-/* Channel */ AD_CALIB_CN(9),
-/* GD Calib */ AD_CALIB_CMD_GD,
-/* Length */ 1 + 3*AD_N_RX_ENTRIES(3),
-/* N Entries */ AD_N_RX_ENTRIES(3),
-
-/* GD Calib: Keep */ AD_RX_ID(1), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Keep */ AD_RX_ID(2), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Keep */ AD_RX_ID(3), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(4), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(5), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(6), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(7), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(8), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(9), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(10), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(11), AD_CALIB_GD(GROUP_DELAY_CH9),
-/* GD Calib: Skip */ //  AD_RX_ID(12), AD_CALIB_GD(GROUP_DELAY_CH9),
+    0x14,
+    0x2F, 0x21, 0x00, 0x10,
+    0x09,
+    0x02,
+    0x0D,
+    0x04,
+    0x01, 0xD0, 0x3A,
+    0x02, 0xD0, 0x3A,
+    0x03, 0xD0, 0x3A,
+    0x04, 0xD0, 0x3A,
 };
 
-const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel6[] =
-{
-/* Over All Length */ 4 + ( 3 + (1 + 3*AD_N_RX_ENTRIES(3))),
-/* Set Calib */ 0x2F, 0x21,
-/* Length */ 0,  3 + (1 + 3*AD_N_RX_ENTRIES(3)),
-/* Channel */ AD_CALIB_CN(6),
-/* GD Calib */ AD_CALIB_CMD_GD,
-/* Length */ 1 + 3*AD_N_RX_ENTRIES(3),
-/* N Entries */ AD_N_RX_ENTRIES(3),
-
-/* GD Calib: Keep */ AD_RX_ID(1), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Keep */ AD_RX_ID(2), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Keep */ AD_RX_ID(3), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(4), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(5), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(6), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(7), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(8), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(9), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(10), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(11), AD_CALIB_GD(GROUP_DELAY_CH6),
-/* GD Calib: Skip */ //  AD_RX_ID(12), AD_CALIB_GD(GROUP_DELAY_CH6),
-};
+const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel6[] = {};
 
-const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel8[] =
-{
-/* Over All Length */ 4 + ( 3 + (1 + 3*AD_N_RX_ENTRIES(3))),
-/* Set Calib */ 0x2F, 0x21,
-/* Length */ 0,  3 + (1 + 3*AD_N_RX_ENTRIES(3)),
-/* Channel */ AD_CALIB_CN(8),
-/* GD Calib */ AD_CALIB_CMD_GD,
-/* Length */ 1 + 3*AD_N_RX_ENTRIES(3),
-/* N Entries */ AD_N_RX_ENTRIES(3),
-
-/* GD Calib: Keep */ AD_RX_ID(1), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Keep */ AD_RX_ID(2), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Keep */ AD_RX_ID(3), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(4), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(5), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(6), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(7), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(8), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(9), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(10), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(11), AD_CALIB_GD(GROUP_DELAY_CH8),
-/* GD Calib: Skip */ //  AD_RX_ID(12), AD_CALIB_GD(GROUP_DELAY_CH8),
-};
+const uint8_t phNxpUciHal_rx_antennae_delay_calib_channel8[] = {};
 
 const uint8_t phNxpUciHal_core_antennadefs[] =
 {
@@ -261,143 +200,135 @@ AD_ANTENNAS_RX_PAIR_DEFINE,
 };
 
 const uint8_t phNxpUciHal_rx_pair_1_ch_5_pdoa_calib[] = {
-   /* Over All Length */ 4 + (5 + AD_CALIB_LEN_PDOA_CALIB),
-   /* Set Calib */ 0x2F, 0x21,    // 0x11 (0001 0001) to be used without UCI Payload Extension and 0x91(1001 0001) to be used with UCI Payload Extension
-   /* Length */ 0x00, 5 + AD_CALIB_LEN_PDOA_CALIB,
-   /* Channel */ AD_CALIB_CN(5),
-   /* pdoa calib */ AD_CALIB_CMD_PDOA_CALIB,
-   2 + AD_CALIB_LEN_PDOA_CALIB,
-   /* N Entries */ AD_N_PAIR_ENTRIES(1),
-   /* RX Pair */ AD_AP_ID(1),
-/*Pan -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60, */
-   0x6F, 0xCE, 0xCD, 0xCE, 0x97, 0xD6, 0x19, 0xE1, 0xDD, 0xEF, 0xF9, 0x00, 0x88, 0x0F, 0x98, 0x1A, 0xC4, 0x24, 0x4C, 0x30, 0x83, 0x37,
-   0xAF, 0xD1, 0xE0, 0xCF, 0xC1, 0xD4, 0x7F, 0xDF, 0xB7, 0xED, 0x21, 0xFD, 0x8B, 0x0B, 0xA6, 0x18, 0xED, 0x24, 0x2F, 0x2F, 0x61, 0x35,
-   0x7C, 0xD1, 0x31, 0xD2, 0x8A, 0xD6, 0x81, 0xDF, 0xAB, 0xEC, 0x4F, 0xFC, 0x75, 0x0B, 0xC4, 0x18, 0x91, 0x23, 0x54, 0x2C, 0x1E, 0x34,
-   0xAE, 0xCF, 0x6D, 0xD3, 0xDE, 0xD9, 0x5F, 0xE2, 0x9C, 0xED, 0xB3, 0xFB, 0xDE, 0x09, 0x63, 0x16, 0x1E, 0x21, 0xCD, 0x2B, 0x48, 0x35,
-   0x9A, 0xCD, 0xB0, 0xD2, 0x2C, 0xDA, 0x24, 0xE3, 0xF4, 0xED, 0xDD, 0xFA, 0xCD, 0x08, 0x6C, 0x16, 0xE6, 0x22, 0xA9, 0x2E, 0x78, 0x37,
-   0x97, 0xCC, 0xA8, 0xD1, 0xB6, 0xD8, 0x29, 0xE2, 0xB3, 0xEE, 0x89, 0xFE, 0xBE, 0x0E, 0xCB, 0x1C, 0xAC, 0x28, 0x71, 0x32, 0x43, 0x39,
-   0xBE, 0xCB, 0xC0, 0xCF, 0xB8, 0xD6, 0x90, 0xE1, 0x13, 0xF1, 0xD4, 0x02, 0x22, 0x12, 0x48, 0x1E, 0xE6, 0x28, 0x1A, 0x32, 0x41, 0x39,
-   0xB5, 0xCA, 0x3C, 0xCF, 0xF0, 0xD6, 0x39, 0xE4, 0xAC, 0xF4, 0xEE, 0x03, 0x74, 0x0F, 0xE0, 0x18, 0x4E, 0x23, 0xB2, 0x2F, 0x3A, 0x38,
-   0xF0, 0xC7, 0x11, 0xD0, 0x9D, 0xD9, 0x87, 0xE6, 0xB9, 0xF5, 0x1D, 0x03, 0x38, 0x0C, 0xF2, 0x12, 0x64, 0x1C, 0x64, 0x2C, 0x2D, 0x36,
-   0xBD, 0xC6, 0x8C, 0xCF, 0x0A, 0xDA, 0x37, 0xE7, 0x1D, 0xF5, 0x3B, 0x02, 0x58, 0x0B, 0x03, 0x10, 0x30, 0x19, 0xF2, 0x25, 0x7C, 0x2F,
-   0x3E, 0xC8, 0xBC, 0xCD, 0x5C, 0xD9, 0x56, 0xE7, 0x0C, 0xF3, 0xE8, 0xFF, 0x77, 0x0A, 0xC5, 0x10, 0xDB, 0x17, 0x89, 0x1C, 0xE9, 0x32,
+    0xFB,
+    0x2F, 0x21, 0x00, 0xF7, 
+    0x05, 
+    0x62,
+    0xF4,
+    0x01, 
+    0x01, 
+    // Pan  -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60,
+    0x80, 0x3E, 0x75, 0x2F, 0x69, 0x1F, 0x76, 0x14, 0x0D, 0x09, 0xA6, 0xFD, 0x8C, 0xF4, 0x71, 0xED, 0x86, 0xE5, 0x5E, 0xDB, 0x7E, 0xD4,
+    0x44, 0x3B, 0x78, 0x32, 0x2B, 0x24, 0xDF, 0x15, 0x5B, 0x09, 0x06, 0xFD, 0x77, 0xF2, 0x42, 0xEA, 0x84, 0xE1, 0xED, 0xD6, 0xE5, 0xD0,
+    0xA4, 0x36, 0x32, 0x31, 0xB4, 0x26, 0xB8, 0x19, 0xAE, 0x0B, 0x60, 0xFE, 0x53, 0xF2, 0xFE, 0xE6, 0x68, 0xDC, 0xFB, 0xD4, 0x4B, 0xCE,
+    0x71, 0x33, 0x2A, 0x2D, 0x01, 0x24, 0x04, 0x18, 0x42, 0x0B, 0x41, 0xFE, 0x3A, 0xF2, 0x1E, 0xE7, 0x91, 0xDE, 0x56, 0xD6, 0xCC, 0xCD,
+    0x48, 0x34, 0x81, 0x2C, 0x3D, 0x24, 0x92, 0x1A, 0x00, 0x0E, 0x42, 0x01, 0x5D, 0xF4, 0x7B, 0xE8, 0x6C, 0xDE, 0x6C, 0xD5, 0xA5, 0xCD,
+    0x9F, 0x35, 0x77, 0x2C, 0xAF, 0x22, 0x1B, 0x18, 0x29, 0x0C, 0x00, 0x00, 0xAA, 0xF5, 0x79, 0xEB, 0x10, 0xE1, 0xD1, 0xD7, 0xC5, 0xD0,
+    0xF9, 0x35, 0x19, 0x2E, 0x9F, 0x25, 0xDB, 0x1A, 0x44, 0x0E, 0x48, 0x02, 0x4A, 0xF6, 0x86, 0xEC, 0xA4, 0xE3, 0x10, 0xDB, 0x4B, 0xD3,
+    0x77, 0x34, 0x50, 0x2A, 0x1A, 0x1E, 0x41, 0x14, 0x27, 0x0B, 0x3F, 0x01, 0xB0, 0xF6, 0x3B, 0xEC, 0x81, 0xE1, 0xBE, 0xD8, 0x35, 0xD3,
+    0x6A, 0x30, 0x68, 0x24, 0xA3, 0x1E, 0xE2, 0x17, 0x88, 0x0A, 0x85, 0x00, 0x95, 0xF8, 0xFD, 0xEF, 0x66, 0xE6, 0xF4, 0xD9, 0xF1, 0xCF,
+    0xC3, 0x2B, 0x13, 0x20, 0xA0, 0x1B, 0x6A, 0x0B, 0x83, 0x00, 0x41, 0xF9, 0x95, 0xF4, 0x57, 0xEE, 0x61, 0xE7, 0x6C, 0xDC, 0x92, 0xD2,
+    0xDB, 0x23, 0x1E, 0x21, 0x63, 0x12, 0xA3, 0x07, 0xD8, 0xFF, 0x7E, 0xF7, 0xE9, 0xF0, 0x47, 0xEB, 0x83, 0xE6, 0xD9, 0xE0, 0xF1, 0xD4,
 };
 
 const uint8_t phNxpUciHal_rx_pair_1_ch_9_pdoa_calib[] = {
-   /* Over All Length */ 4 + (5 + AD_CALIB_LEN_PDOA_CALIB),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 5 + AD_CALIB_LEN_PDOA_CALIB,
-   /* Channel */ AD_CALIB_CN(9),
-   /* pdoa calib */ AD_CALIB_CMD_PDOA_CALIB,
-   2 + AD_CALIB_LEN_PDOA_CALIB,
-   /* N Entries */ AD_N_PAIR_ENTRIES(1),
-   /* RX Pair */ AD_AP_ID(1),
-   /* Pan   -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60, */
-         0xEF, 0xB7, 0x41, 0xC0, 0x67, 0xCD, 0xD3, 0xDD, 0x50, 0xF0, 0x5F, 0x00, 0x00, 0x0B, 0xBA, 0x15, 0x5F, 0x27, 0x80, 0x37, 0x9E, 0x41, /* Tilt: -60 */
-         0x20, 0xB8, 0xB6, 0xBE, 0xF7, 0xCA, 0x13, 0xDD, 0x40, 0xEF, 0x94, 0xFE, 0x22, 0x0B, 0x82, 0x19, 0xDC, 0x29, 0x70, 0x37, 0x69, 0x40, /* Tilt: -48 */
-         0x74, 0xBA, 0x29, 0xC1, 0x9C, 0xCB, 0xBE, 0xDB, 0xAC, 0xED, 0x23, 0xFE, 0x99, 0x0C, 0x96, 0x1B, 0x06, 0x2B, 0xE3, 0x37, 0xCD, 0x3F, /* Tilt: -36 */
-         0xF2, 0xBB, 0x6E, 0xC2, 0x46, 0xCC, 0xFD, 0xDA, 0xCB, 0xEC, 0x08, 0xFF, 0xA3, 0x0F, 0x2D, 0x1F, 0x64, 0x2D, 0x89, 0x38, 0x67, 0x3F, /* Tilt: -24 */
-         0xC3, 0xBC, 0xA9, 0xC2, 0xBB, 0xCC, 0x2A, 0xDC, 0x35, 0xEE, 0x18, 0x01, 0x9A, 0x11, 0x66, 0x20, 0xA4, 0x2D, 0x38, 0x38, 0x63, 0x3F, /* Tilt: -12 */
-         0x91, 0xBD, 0xBE, 0xC3, 0x04, 0xCE, 0x1C, 0xDE, 0x27, 0xF0, 0x43, 0x01, 0xF1, 0x11, 0x4D, 0x22, 0xF0, 0x2F, 0x0F, 0x3A, 0x3B, 0x41, /* Tilt: 0 */
-         0xF9, 0xBD, 0x94, 0xC4, 0xEB, 0xCD, 0x86, 0xDC, 0x53, 0xEF, 0x30, 0x01, 0xBB, 0x11, 0x3E, 0x23, 0xBB, 0x31, 0xAB, 0x3C, 0x67, 0x44, /* Tilt: 12 */
-         0x77, 0xBD, 0x23, 0xC4, 0xCB, 0xCB, 0x22, 0xD8, 0x49, 0xEC, 0xC4, 0x02, 0xC0, 0x13, 0x1F, 0x23, 0x16, 0x32, 0x73, 0x3E, 0x9E, 0x45, /* Tilt: 24 */
-         0x8F, 0xBB, 0x3D, 0xC2, 0x9B, 0xC9, 0xAB, 0xD5, 0xB5, 0xEA, 0x98, 0x03, 0x8A, 0x14, 0xD3, 0x21, 0x08, 0x30, 0x12, 0x3C, 0x40, 0x43, /* Tilt: 36 */
-         0xD3, 0xBB, 0x03, 0xBF, 0xE8, 0xC6, 0x5E, 0xD5, 0x49, 0xEB, 0x87, 0x02, 0xCC, 0x13, 0xB1, 0x1D, 0x89, 0x29, 0x35, 0x38, 0x11, 0x48, /* Tilt: 48 */
-         0x63, 0xBC, 0x54, 0xBE, 0x98, 0xC3, 0x81, 0xD6, 0x24, 0xEC, 0xA7, 0xFD, 0xEB, 0x0F, 0x44, 0x1C, 0x3D, 0x28, 0x97, 0x39, 0x6C, 0x47  /* Tilt: 60 */
+    0xFB,
+    0x2F, 0x21, 0x00, 0xF7,
+    0x09,
+    0x62,
+    0xF4,
+    0x01,
+    0x01,
+    // Pan  -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60,
+    0x80, 0x49, 0x40, 0x39, 0xD4, 0x30, 0x8C, 0x20, 0xA8, 0x11, 0x18, 0xFE, 0x9B, 0xEE, 0x17, 0xE3, 0xE7, 0xD3, 0x2D, 0xCC, 0x2F, 0xC1, 
+    0x5A, 0x3E, 0xC1, 0x39, 0x29, 0x2E, 0x7C, 0x1E, 0x4B, 0x0E, 0x45, 0xFD, 0xE2, 0xEC, 0x56, 0xDF, 0x57, 0xD6, 0x53, 0xC8, 0x2C, 0xC3, 
+    0x0B, 0x3D, 0x05, 0x3A, 0xAB, 0x2C, 0xD4, 0x1E, 0x1D, 0x0E, 0x9C, 0xFC, 0x10, 0xEC, 0xA9, 0xE0, 0x2B, 0xD5, 0x2A, 0xC9, 0x39, 0xC3, 
+    0xDA, 0x41, 0xB5, 0x33, 0x65, 0x2B, 0x8C, 0x1C, 0xFF, 0x0D, 0x27, 0xFF, 0x93, 0xEE, 0x87, 0xDF, 0x8F, 0xD2, 0xE1, 0xCB, 0x32, 0xBB, 
+    0x25, 0x4A, 0xAD, 0x37, 0x4C, 0x2B, 0xF3, 0x1D, 0xA3, 0x0D, 0xCB, 0xFC, 0xDB, 0xEC, 0x0F, 0xDF, 0x30, 0xD3, 0x54, 0xC7, 0x8D, 0xBC, 
+    0x8B, 0x44, 0x9A, 0x39, 0x2C, 0x2B, 0x3D, 0x1D, 0x00, 0x0F, 0x00, 0x00, 0x28, 0xF0, 0x18, 0xE2, 0x0D, 0xD6, 0x0A, 0xCC, 0xC4, 0xC4, 
+    0x7B, 0x3D, 0x10, 0x35, 0x6C, 0x2B, 0xFE, 0x1E, 0xC8, 0x0F, 0xED, 0x00, 0x4A, 0xF1, 0x4E, 0xE4, 0xC2, 0xD9, 0xFC, 0xD0, 0xF9, 0xC9, 
+    0x24, 0x41, 0xBE, 0x39, 0x75, 0x2D, 0x98, 0x21, 0x9B, 0x14, 0xA8, 0x04, 0x23, 0xF3, 0x6C, 0xE4, 0x5B, 0xD6, 0x32, 0xCC, 0x6E, 0xC6, 
+    0x8A, 0x46, 0xBA, 0x38, 0x50, 0x2E, 0xA4, 0x1E, 0x22, 0x0F, 0x22, 0x03, 0xFF, 0xF6, 0x71, 0xEA, 0x5D, 0xDE, 0xB1, 0xCF, 0x21, 0xC1, 
+    0x18, 0x43, 0x0A, 0x3A, 0x96, 0x2D, 0x6F, 0x27, 0x13, 0x18, 0x29, 0x04, 0x4B, 0xF2, 0x5A, 0xE7, 0x9E, 0xDC, 0x98, 0xD2, 0x6B, 0xC4, 
+    0x10, 0x43, 0x77, 0x37, 0x25, 0x34, 0x7C, 0x25, 0x47, 0x12, 0xE6, 0x00, 0xCD, 0xEF, 0xEB, 0xDF, 0x3E, 0xD7, 0xEC, 0xCF, 0xBB, 0xC9,
 };
 
 const uint8_t phNxpUciHal_rx_pair_2_ch_5_pdoa_calib[] = {
-   /* Over All Length */ 4 + (5 + AD_CALIB_LEN_PDOA_CALIB),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 5 + AD_CALIB_LEN_PDOA_CALIB,
-   /* Channel */ AD_CALIB_CN(5),
-   /* pdoa calib */ AD_CALIB_CMD_PDOA_CALIB,
-   2 + AD_CALIB_LEN_PDOA_CALIB,
-   /* N Entries */ AD_N_PAIR_ENTRIES(1),
-   /* RX Pair */ AD_AP_ID(2),
-   /* Tilt -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60, */
-         0x25, 0xE5, 0x05, 0xE8, 0x9E, 0xEB, 0x0D, 0xF1, 0x66, 0xF7, 0xD4, 0xFD, 0xE1, 0x03, 0xF8, 0x07, 0x79, 0x0A, 0xE6, 0x0F, 0xFB, 0x0E, /* Pan: -60 */
-         0xC2, 0xDC, 0x56, 0xDD, 0xE7, 0xE0, 0x58, 0xE8, 0x47, 0xF1, 0x15, 0xFC, 0xD3, 0x05, 0x08, 0x0E, 0xB1, 0x13, 0x56, 0x18, 0xC5, 0x17, /* Pan: -48 */
-         0x22, 0xD3, 0x0F, 0xD6, 0xB3, 0xDA, 0x11, 0xE2, 0x6B, 0xEC, 0x7B, 0xFB, 0x82, 0x07, 0x70, 0x11, 0x93, 0x1B, 0xC3, 0x20, 0x3E, 0x21, /* Pan: -36 */
-         0xB2, 0xCB, 0xA8, 0xD0, 0x88, 0xD7, 0x5D, 0xDE, 0x01, 0xE9, 0xB2, 0xFB, 0xB6, 0x08, 0x9A, 0x13, 0x42, 0x21, 0xBA, 0x29, 0x10, 0x31, /* Pan: -24 */
-         0xD1, 0xC7, 0x17, 0xCD, 0x55, 0xD5, 0x6C, 0xDC, 0xAB, 0xE6, 0x2D, 0xFC, 0x65, 0x0A, 0x23, 0x16, 0x49, 0x25, 0xAF, 0x2F, 0xAA, 0x38, /* Pan: -12 */
-         0x3A, 0xC7, 0xF4, 0xCB, 0xBE, 0xD3, 0x70, 0xDB, 0x90, 0xE5, 0xED, 0xFC, 0xA5, 0x0C, 0x88, 0x17, 0x98, 0x26, 0xF1, 0x31, 0xC6, 0x38, /* Pan: 0 */
-         0x8E, 0xC8, 0xD1, 0xCC, 0xFA, 0xD3, 0x5B, 0xDB, 0xF7, 0xE5, 0xD5, 0xFD, 0x4F, 0x0E, 0xB1, 0x16, 0x59, 0x24, 0x6E, 0x32, 0x98, 0x35, /* Pan: 12 */
-         0x6B, 0xCB, 0x85, 0xCF, 0xC7, 0xD5, 0x64, 0xDC, 0xB6, 0xE7, 0x3A, 0xFE, 0x6C, 0x0E, 0x3F, 0x14, 0x08, 0x1D, 0x92, 0x2B, 0xA8, 0x33, /* Pan: 24 */
-         0xB5, 0xCF, 0x64, 0xD3, 0x6D, 0xD8, 0x58, 0xDE, 0xBA, 0xEA, 0xA7, 0xFE, 0xCD, 0x0D, 0xE4, 0x12, 0xD8, 0x14, 0xC7, 0x1D, 0xF3, 0x2E, /* Pan: 36 */
-         0xE3, 0xD5, 0xF8, 0xD8, 0x6B, 0xDC, 0xCC, 0xE2, 0xFA, 0xEE, 0x00, 0xFF, 0x6A, 0x0C, 0xAD, 0x13, 0x7D, 0x16, 0x89, 0x18, 0x0C, 0x1C, /* Pan: 48 */
-         0x93, 0xDC, 0xB9, 0xDE, 0x2C, 0xE2, 0x0A, 0xE9, 0x18, 0xF3, 0x84, 0xFE, 0x13, 0x09, 0x51, 0x11, 0xCF, 0x17, 0xDE, 0x16, 0xC7, 0x24  /* Pan: 60 */
+    0xFB,
+    0x2F, 0x21, 0x00, 0xF7, 
+    0x05, 
+    0x62,
+    0xF4,
+    0x01, 
+    0x02, 
+    // Pan  -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60,
+    0x4F, 0xEC, 0x4A, 0xEF, 0x4A, 0xF2, 0xCD, 0xF5, 0x87, 0xFB, 0x79, 0x02, 0x69, 0x08, 0x8C, 0x0C, 0xDE, 0x0C, 0xE6, 0x0A, 0x48, 0x07,
+    0x69, 0xDF, 0x8E, 0xE5, 0xA3, 0xEB, 0x54, 0xF1, 0x2A, 0xF8, 0x0C, 0x01, 0x1B, 0x09, 0xA6, 0x0F, 0x79, 0x11, 0x1C, 0x11, 0xFC, 0x11,
+    0x92, 0xD8, 0xD9, 0xDE, 0xB3, 0xE6, 0xD9, 0xED, 0x7B, 0xF7, 0x7C, 0x01, 0xE5, 0x0B, 0x81, 0x13, 0xF8, 0x19, 0xAD, 0x20, 0xB8, 0x21,
+    0x19, 0xD2, 0x97, 0xD9, 0x0B, 0xE2, 0xDB, 0xEB, 0x6C, 0xF7, 0x6E, 0x02, 0x14, 0x0F, 0x24, 0x17, 0xE7, 0x23, 0x62, 0x2D, 0xF0, 0x2E,
+    0x71, 0xCA, 0x9F, 0xD5, 0x0B, 0xDE, 0x1A, 0xEA, 0xD1, 0xF6, 0x5F, 0x03, 0xC9, 0x10, 0x00, 0x1A, 0xDF, 0x29, 0xA2, 0x34, 0x49, 0x3A,
+    0xC7, 0xC4, 0x1B, 0xD2, 0x8C, 0xDB, 0xF3, 0xE7, 0x16, 0xF6, 0x00, 0x00, 0x06, 0x10, 0x52, 0x1B, 0x94, 0x2A, 0xF2, 0x35, 0xA1, 0x3A,
+    0x24, 0xC4, 0x25, 0xD0, 0xE4, 0xD8, 0xA3, 0xE6, 0xCC, 0xF5, 0x26, 0x03, 0xBB, 0x09, 0x4E, 0x19, 0x38, 0x24, 0x81, 0x31, 0x27, 0x34,
+    0x79, 0xC7, 0x7F, 0xCF, 0x09, 0xD7, 0x5C, 0xE6, 0xF3, 0xF3, 0x44, 0x01, 0x76, 0x07, 0xF1, 0x14, 0x65, 0x1F, 0x4F, 0x2A, 0x54, 0x2D,
+    0xD1, 0xC6, 0x92, 0xCE, 0xC8, 0xD6, 0xED, 0xE7, 0x15, 0xF2, 0x6D, 0xFE, 0x0D, 0x05, 0x6D, 0x0D, 0x78, 0x19, 0x2E, 0x22, 0xD0, 0x26,
+    0xBA, 0xCE, 0x49, 0xD5, 0x1A, 0xDF, 0x80, 0xEA, 0xEE, 0xF0, 0xC8, 0xFB, 0xF1, 0x01, 0xE0, 0x05, 0xC3, 0x0F, 0x3A, 0x1A, 0xB9, 0x22,
+    0x58, 0xE0, 0x87, 0xE4, 0x7C, 0xE8, 0x9C, 0xEE, 0xB2, 0xF3, 0xB6, 0xFB, 0x63, 0xFF, 0xED, 0x00, 0xEE, 0x03, 0xBD, 0x0D, 0xB5, 0x16,
 };
 
 const uint8_t phNxpUciHal_rx_pair_2_ch_9_pdoa_calib[] = {
-   /* Over All Length */ 4 + (5 + AD_CALIB_LEN_PDOA_CALIB),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 5 + AD_CALIB_LEN_PDOA_CALIB,
-   /* Channel */ AD_CALIB_CN(9),
-   /* pdoa calib */ AD_CALIB_CMD_PDOA_CALIB,
-   2 + AD_CALIB_LEN_PDOA_CALIB,
-   /* N Entries */ AD_N_PAIR_ENTRIES(1),
-   /* RX Pair */ AD_AP_ID(2),
-   /* Tilt -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60, */
-         0x7A, 0xD3, 0x8D, 0xD8, 0x12, 0xE0, 0xD7, 0xE9, 0x6F, 0xF4, 0x80, 0xFE, 0x26, 0x08, 0x10, 0x10, 0x74, 0x16, 0xC1, 0x1D, 0xE0, 0x20, /* Pan: -60 */
-         0xFC, 0xCC, 0x21, 0xD2, 0x77, 0xD9, 0x1A, 0xE4, 0x8B, 0xF0, 0xE2, 0xFD, 0x17, 0x0C, 0xB9, 0x17, 0xB5, 0x1F, 0xE1, 0x26, 0xBF, 0x2D, /* Pan: -48 */
-         0x8A, 0xC5, 0x97, 0xCC, 0x15, 0xD5, 0xE0, 0xDF, 0x53, 0xED, 0x23, 0xFD, 0xFD, 0x0E, 0x03, 0x1D, 0x60, 0x27, 0x8A, 0x2D, 0x55, 0x33, /* Pan: -36 */
-         0x86, 0xBE, 0x82, 0xC6, 0xE4, 0xD0, 0xFD, 0xDC, 0xA7, 0xEB, 0xBE, 0xFC, 0xF0, 0x0F, 0xA4, 0x1F, 0x82, 0x2B, 0x2B, 0x32, 0x2C, 0x37, /* Pan: -24 */
-         0x34, 0xBC, 0xFB, 0xC2, 0xA1, 0xCD, 0x9D, 0xDB, 0x2B, 0xEC, 0x2C, 0xFD, 0xC8, 0x0F, 0xE8, 0x21, 0x5D, 0x2F, 0xC7, 0x36, 0x66, 0x3D, /* Pan: -12 */
-         0x03, 0xBD, 0xB5, 0xC2, 0x7E, 0xCC, 0x97, 0xDB, 0x04, 0xEE, 0x43, 0xFF, 0xAC, 0x0F, 0x75, 0x23, 0x2F, 0x33, 0x9D, 0x3B, 0xBF, 0x3F, /* Pan: 0 */
-         0x03, 0xBF, 0xF8, 0xC4, 0x47, 0xCE, 0x21, 0xDD, 0xA5, 0xEF, 0x81, 0x01, 0x48, 0x10, 0x0C, 0x23, 0x82, 0x33, 0xF0, 0x3F, 0xCC, 0x43, /* Pan: 12 */
-         0xCE, 0xC2, 0x81, 0xC9, 0x51, 0xD2, 0xFD, 0xDF, 0x75, 0xF0, 0x66, 0x02, 0xED, 0x10, 0xA7, 0x20, 0xD8, 0x30, 0x90, 0x3D, 0x2E, 0x41, /* Pan: 24 */
-         0x63, 0xCA, 0xA3, 0xD0, 0x86, 0xD8, 0x33, 0xE4, 0xDD, 0xF1, 0x4D, 0x02, 0xC4, 0x10, 0xD5, 0x1D, 0x43, 0x2B, 0x8C, 0x32, 0x65, 0x3D, /* Pan: 36 */
-         0xC8, 0xD3, 0x50, 0xD9, 0x15, 0xE0, 0x23, 0xE9, 0x7E, 0xF3, 0x1C, 0x01, 0x00, 0x10, 0xEB, 0x1B, 0xF8, 0x23, 0xEA, 0x27, 0xC4, 0x37, /* Pan: 48 */
-         0x6D, 0xDD, 0x33, 0xE1, 0x06, 0xE6, 0xA2, 0xEC, 0x9D, 0xF4, 0x7B, 0xFF, 0x00, 0x0D, 0x6D, 0x17, 0x2B, 0x1B, 0x56, 0x26, 0xFB, 0x2A  /* Pan: 60 */
+    0xFB,
+    0x2F, 0x21, 0x00, 0xF7,
+    0x09,
+    0x62,
+    0xF4,
+    0x01,
+    0x02,
+    // Pan  -60,        -48,        -36,        -24,        -12,          0,        +12,        +24,        +36,        +48,        +60,
+    0x9F, 0xEC, 0x9E, 0xE3, 0x45, 0xE9, 0xE9, 0xF5, 0x32, 0x09, 0x14, 0x0E, 0xC5, 0x07, 0x44, 0x13, 0x44, 0x27, 0x38, 0x2B, 0xB0, 0x2C, 
+    0x17, 0xD9, 0x70, 0xDD, 0x09, 0xEB, 0xB3, 0xF0, 0x3C, 0xFB, 0xF0, 0x09, 0xEA, 0x0A, 0xAB, 0x1C, 0x61, 0x27, 0x2F, 0x2D, 0xFF, 0x39, 
+    0x3C, 0xD8, 0xBC, 0xDC, 0xEB, 0xE0, 0x58, 0xF0, 0x24, 0xFB, 0x85, 0x04, 0xD6, 0x0E, 0x74, 0x21, 0xC7, 0x28, 0x55, 0x35, 0x05, 0x43, 
+    0x51, 0xCD, 0x7F, 0xD8, 0x21, 0xE2, 0xE1, 0xE7, 0xCE, 0xF9, 0x0A, 0x02, 0x49, 0x12, 0x4F, 0x23, 0xCA, 0x2D, 0x63, 0x3D, 0x7C, 0x4A, 
+    0xA0, 0xD4, 0xF8, 0xD5, 0x61, 0xE0, 0xE4, 0xE3, 0xCD, 0xF4, 0x9F, 0x00, 0x0D, 0x14, 0x0C, 0x24, 0xEF, 0x2F, 0x68, 0x42, 0x50, 0x4D, 
+    0x03, 0xD1, 0x82, 0xD2, 0x99, 0xDB, 0xAD, 0xE2, 0xC6, 0xF0, 0x00, 0x00, 0xAB, 0x13, 0x99, 0x22, 0x94, 0x30, 0xF7, 0x41, 0x20, 0x4D, 
+    0xFF, 0xCD, 0x6C, 0xD0, 0x75, 0xDA, 0x52, 0xE2, 0x67, 0xF0, 0xA8, 0xFE, 0xAD, 0x0F, 0x26, 0x1E, 0x0C, 0x2F, 0x9A, 0x3C, 0x29, 0x48, 
+    0xF9, 0xCA, 0xA1, 0xD2, 0x16, 0xDB, 0x19, 0xE3, 0x70, 0xF0, 0x9F, 0xFC, 0x95, 0x0C, 0xCA, 0x19, 0x53, 0x2A, 0x6A, 0x37, 0x53, 0x40, 
+    0x49, 0xD1, 0x13, 0xD4, 0x9A, 0xDA, 0xC0, 0xE6, 0x75, 0xEE, 0x2A, 0xFB, 0xA3, 0x0A, 0xC7, 0x11, 0x81, 0x24, 0x34, 0x2D, 0x59, 0x38, 
+    0x91, 0xD8, 0x3D, 0xDF, 0x6B, 0xE5, 0xF2, 0xE7, 0xBB, 0xEB, 0xA4, 0xFB, 0x97, 0x07, 0x49, 0x0A, 0xF9, 0x19, 0x6F, 0x24, 0xF8, 0x2C, 
+    0xA5, 0xE6, 0xF3, 0xDF, 0xA3, 0xE2, 0x6E, 0xE5, 0xCB, 0xEF, 0x76, 0xFC, 0x52, 0x04, 0x19, 0x06, 0xDA, 0x0A, 0x57, 0x17, 0x6F, 0x21,
 };
 
 const uint8_t phNxpUciHal_pdoa_offset_calib_ch_5[] = {
-   /* Over All Length */ (4 + 0x0A),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 0x0A,
-   /* Channel */ AD_CALIB_CN(5),
-   /* PDOA Offset */ AD_CALIB_CMD_PDOA_OFFSET,
-   1 + 3*AD_N_PAIR_ENTRIES(2),
-   /* N Entries */ AD_N_PAIR_ENTRIES(2),
-   AD_AP_ID(1), AD_CALIB_PDOA_OFFSET(0xDDA3),
-   AD_AP_ID(2), AD_CALIB_PDOA_OFFSET(0x41A5)
+    0x0E,
+    0x2F, 0x21, 0x00, 0x0A, 
+    0x05, 
+    0x03,
+    0x07,
+    0x02, 
+    0x01, 0x26, 0x01,
+    0x02, 0xB3, 0x0A,
 };
 
 const uint8_t phNxpUciHal_pdoa_offset_calib_ch_9[] = {
-   /* Over All Length */ (4 + 0x0A),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 0x0A,
-   /* Channel */ AD_CALIB_CN(9),
-   /* PDOA Offset */ AD_CALIB_CMD_PDOA_OFFSET,
-   1 + 3*AD_N_PAIR_ENTRIES(2),
-   /* N Entries */ AD_N_PAIR_ENTRIES(2),
-   AD_AP_ID(1), AD_CALIB_PDOA_OFFSET(0xD8E7),
-   AD_AP_ID(2), AD_CALIB_PDOA_OFFSET(0x484E)
+    0x0E,
+    0x2F, 0x21, 0x00, 0x0A,
+    0x09,
+    0x03,
+    0x07,
+    0x02,
+    0x01, 0x40, 0xFE, 
+    0x02, 0x67, 0xFD,
 };
 
 const uint8_t phNxpUciHal_aoa_threshold_pdoa_calib_ch_5[] = {
-   /* Over All Length */ (4 + 0x0A),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 0x0A,
-   /* Channel */ AD_CALIB_CN(5),
-   /* PDOA Offset */ AD_CALIB_CMD_AOA_THRESHOLD_PDOA,
-   1 + 3*AD_N_PAIR_ENTRIES(2),
-   /* N Entries */ AD_N_PAIR_ENTRIES(2),
-   AD_AP_ID(1), AD_CALIB_THRESHOLD_PDOA(0x37A2),
-   AD_AP_ID(2), AD_CALIB_THRESHOLD_PDOA(0xE7A6)
+    0x0E,
+    0x2F, 0x21, 0x00, 0x0A, 
+    0x05, 
+    0x66,
+    0x07,
+    0x02, 
+    0x01, 0x10, 0x59,
+    0x02, 0x61, 0xB3,
 };
 
 const uint8_t phNxpUciHal_aoa_threshold_pdoa_calib_ch_9[] = {
-   /* Over All Length */ (4 + 0x0A),
-   /* Set Calib */ 0x2F, 0x21,
-   /* Length */ 0x00, 0x0A,
-   /* Channel */ AD_CALIB_CN(9),
-   /* PDOA Offset */ AD_CALIB_CMD_AOA_THRESHOLD_PDOA,
-   1 + 3*AD_N_PAIR_ENTRIES(2),
-   /* N Entries */ AD_N_PAIR_ENTRIES(2),
-   AD_AP_ID(1), AD_CALIB_THRESHOLD_PDOA(0x32E6),
-   AD_AP_ID(2), AD_CALIB_THRESHOLD_PDOA(0xEE4F)
+    0x0E,
+    0x2F, 0x21, 0x00, 0x0A,
+    0x09,
+    0x66,
+    0x07,
+    0x02,
+    0x01, 0x7E, 0x58,
+    0x02, 0xB4, 0xA7,
 };
 
 /* clang-format on */
diff --git demos/SR1XX/demo_nearby_interaction/src/TLV_Mng.c demos/SR1XX/demo_nearby_interaction/src/TLV_Mng.c
index 8f6ec11..8a5972e 100644
--- demos/SR1XX/demo_nearby_interaction/src/TLV_Mng.c
+++ demos/SR1XX/demo_nearby_interaction/src/TLV_Mng.c
@@ -159,6 +159,19 @@ void handleTLV(uint8_t deviceId, uint8_t *data)
          *
          */
 
+         uint8_t antennaeConfigurationRx[] = {
+                 0x01, // Mode of Operation
+                 0x02, // size of configuration data
+                 0x01, // RX Pair H
+                 0x02, // RX Pair V
+         };
+
+         const UWB_VendorAppParams_List_t   SetAppParamsList[] = {
+                 UWB_SET_APP_PARAM_VALUE(TX_ADAPTIVE_PAYLOAD_POWER, 1),
+                 UWB_SET_APP_PARAM_ARRAY(
+                    ANTENNAE_CONFIGURATION_RX, &antennaeConfigurationRx[0], sizeof(antennaeConfigurationRx)),
+         };
+
         if (mDevice[deviceId] == kDev_android_c) {
             profileInfo.mac_addr[0] = mMacAddr[deviceId] >> 8 & 0xFF;
             profileInfo.mac_addr[1] = mMacAddr[deviceId] >> 0 & 0xFF;
@@ -166,7 +179,12 @@ void handleTLV(uint8_t deviceId, uint8_t *data)
             LOG_MAU8_I("mac addr :", profileInfo.mac_addr, 2);
 
             uwb_status = UwbApi_ConfigureData_Android(
-                data + 1, SHAREABLE_DATA_HEADER_LENGTH_ANDROID, &profileInfo, 0, NULL, 0, NULL);
+                data + 1, SHAREABLE_DATA_HEADER_LENGTH_ANDROID,
+                &profileInfo,
+                sizeof(SetAppParamsList) / sizeof(SetAppParamsList[0]),
+                &SetAppParamsList[0],
+                0,
+                NULL);
             if (uwb_status != UWBAPI_STATUS_OK) {
                 LOG_E("Shareable data not configured");
             }
@@ -192,8 +210,8 @@ void handleTLV(uint8_t deviceId, uint8_t *data)
             uwb_status = UwbApi_ConfigureData_iOS(data + 1,
                 *(data + SHAREABLE_DATA_LENGTH_OFFSET) + SHAREABLE_DATA_HEADER_LENGTH,
                 &profileInfo,
-                0,
-                NULL,
+                sizeof(SetAppParamsList) / sizeof(SetAppParamsList[0]),
+                &SetAppParamsList[0],
                 0,
                 NULL);
             if (uwb_status != UWBAPI_STATUS_OK) {
@@ -428,6 +446,51 @@ bool handleDeviceInit(void)
         }
         else {
             gDeviceInitialized = TRUE;
+
+            // TX_POWER_ID
+            uint16_t bitmask = (1<<1); // TX_POWER_ID
+            phCalibPayload_t calib;
+    /*  calib.TX_POWER_ID[4]
+        [0]: TX_RMS_POWER_IND for TX ID1
+        [1]: TX_Peak_POWER_IND for TX ID1
+        [2]: TX_RMS_POWER_IND for TX ID2
+        [3]: TX_Peak_POWER_IND for TX ID2
+    */
+            uint8_t channels[] = {5, 9};
+            uint8_t channel;
+            uint8_t TX_POWER[11] = {0x02 /* Number of parameters */,
+                                   0x01 /* for TX ID 1 */, 0x00, 0x00, 0x00, 0x00,
+        						   0x02 /* for TX ID 2 */, 0x00, 0x00, 0x00, 0x00};
+    /* TX_POWER[11]
+       [0]: Number of paramters
+       [1]: TX ID 1
+       [2][3]: TX_POWER_DELTA_PEAK for TX ID 1
+       [4][5]: TX_POWER_ID_RMS for TX ID 1
+       [6]: TX ID 2
+       [7][8]: TX_POWER_DELTA_PEAK for TX ID 2
+       [9][10]: TX_POWER_ID_RMS for TX ID 2
+    */
+            uint8_t CLK_ACCURACY[7] = { 0x03 /* Number of parameters */,
+            							0x00, 0x00 /* CAP1 */,
+        								0x00, 0x00 /* CAP2 */,
+        								0x00, 0x00 /* GM CURRNT CONTROL */};
+
+            int i;
+            for(i = 0; i < sizeof(channels); i++) {
+                channel = channels[i];
+                UwbApi_ReadOtpCalibDataCmd(channel, bitmask, &calib);
+                TX_POWER[4] = calib.TX_POWER_ID[0] + (2.1-0.6+0.5)*4;
+                TX_POWER[2] = calib.TX_POWER_ID[1];
+                UwbApi_SetCalibration(channel, TX_POWER_PER_ANTENNA, TX_POWER, sizeof(TX_POWER));
+            }
+
+            // XTAL_CAP
+            bitmask = (1<<2); // XTAL_CAP
+            UwbApi_ReadOtpCalibDataCmd(9, bitmask, &calib);    // channel 9 is dummy. not used for XTAL_CAP
+            CLK_ACCURACY[1] = calib.XTAL_CAP_VALUES[0];
+            CLK_ACCURACY[3] = calib.XTAL_CAP_VALUES[1];
+            CLK_ACCURACY[5] = calib.XTAL_CAP_VALUES[2];
+            UwbApi_SetCalibration(9, RF_CLK_ACCURACY_CALIB, CLK_ACCURACY, sizeof(CLK_ACCURACY));
         }
     }
     return TRUE;
diff --git demos/SR1XX/demo_ranging_controlee/demo_ranging_controlee.c demos/SR1XX/demo_ranging_controlee/demo_ranging_controlee.c
index 2ed35be..b9aed51 100644
--- demos/SR1XX/demo_ranging_controlee/demo_ranging_controlee.c
+++ demos/SR1XX/demo_ranging_controlee/demo_ranging_controlee.c
@@ -82,6 +82,51 @@ OSAL_TASK_RETURN_TYPE StandaloneTask(void *args)
         goto exit;
     }
 
+    // TX_POWER_ID
+    uint16_t bitmask = (1<<1); // TX_POWER_ID
+    phCalibPayload_t calib;
+    /*  calib.TX_POWER_ID[4]
+        [0]: TX_RMS_POWER_IND for TX ID1
+        [1]: TX_Peak_POWER_IND for TX ID1
+        [2]: TX_RMS_POWER_IND for TX ID2
+        [3]: TX_Peak_POWER_IND for TX ID2
+    */
+    uint8_t channels[] = {5, 9};
+    uint8_t channel;
+    uint8_t TX_POWER[11] = {0x02 /* Number of parameters */,
+                           0x01 /* for TX ID 1 */, 0x00, 0x00, 0x00, 0x00,
+                           0x02 /* for TX ID 2 */, 0x00, 0x00, 0x00, 0x00};
+    /* TX_POWER[11]
+       [0]: Number of paramters
+       [1]: TX ID 1
+       [2][3]: TX_POWER_DELTA_PEAK for TX ID 1
+       [4][5]: TX_POWER_ID_RMS for TX ID 1
+       [6]: TX ID 2
+       [7][8]: TX_POWER_DELTA_PEAK for TX ID 2
+       [9][10]: TX_POWER_ID_RMS for TX ID 2
+    */
+    uint8_t CLK_ACCURACY[7] = { 0x03 /* Number of parameters */,
+    							0x00, 0x00 /* CAP1 */,
+								0x00, 0x00 /* CAP2 */,
+								0x00, 0x00 /* GM CURRNT CONTROL */};
+
+    int i;
+    for(i = 0; i < sizeof(channels); i++) {
+        channel = channels[i];
+        UwbApi_ReadOtpCalibDataCmd(channel, bitmask, &calib);
+        TX_POWER[4] = calib.TX_POWER_ID[0] + (2.1-0.6+0.5)*4;
+        TX_POWER[2] = calib.TX_POWER_ID[1];
+        UwbApi_SetCalibration(channel, TX_POWER_PER_ANTENNA, TX_POWER, sizeof(TX_POWER));
+    }
+
+    // XTAL_CAP
+    bitmask = (1<<2); // XTAL_CAP
+    UwbApi_ReadOtpCalibDataCmd(9, bitmask, &calib);    // channel 9 is dummy. not used for XTAL_CAP
+    CLK_ACCURACY[1] = calib.XTAL_CAP_VALUES[0];
+    CLK_ACCURACY[3] = calib.XTAL_CAP_VALUES[1];
+    CLK_ACCURACY[5] = calib.XTAL_CAP_VALUES[2];
+    UwbApi_SetCalibration(9, RF_CLK_ACCURACY_CALIB, CLK_ACCURACY, sizeof(CLK_ACCURACY));
+
     status = UwbApi_GetDeviceInfo(&devInfo);
     printDeviceInfo(&devInfo);
     if (status != UWBAPI_STATUS_OK) {
@@ -129,8 +174,8 @@ OSAL_TASK_RETURN_TYPE StandaloneTask(void *args)
         goto exit;
     }
 
-    /* Delay 5 Mins for Ranging MILLISECONDS = MINUTES * 60 * 1000 */
-    delay = 5 * 60 * 1000; /*Waiting for 5 mins*/
+    /* Delay 30 Mins for Ranging MILLISECONDS = MINUTES * 60 * 1000 */
+    delay = 30 * 60 * 1000; /*Waiting for 30 mins*/
 
     /* When Ranging is terminated due to inband termination this semaphore will
      * be signaled, otherwise ranging will be performed for the time specified */
diff --git demos/SR1XX/demo_ranging_controller/demo_ranging_controller.c demos/SR1XX/demo_ranging_controller/demo_ranging_controller.c
index d584b16..20c2632 100644
--- demos/SR1XX/demo_ranging_controller/demo_ranging_controller.c
+++ demos/SR1XX/demo_ranging_controller/demo_ranging_controller.c
@@ -81,6 +81,51 @@ OSAL_TASK_RETURN_TYPE StandaloneTask(void *args)
         goto exit;
     }
 
+    // TX_POWER_ID
+    uint16_t bitmask = (1<<1); // TX_POWER_ID
+    phCalibPayload_t calib;
+    /*  calib.TX_POWER_ID[4]
+        [0]: TX_RMS_POWER_IND for TX ID1
+        [1]: TX_Peak_POWER_IND for TX ID1
+        [2]: TX_RMS_POWER_IND for TX ID2
+        [3]: TX_Peak_POWER_IND for TX ID2
+    */
+    uint8_t channels[] = {5, 9};
+    uint8_t channel;
+    uint8_t TX_POWER[11] = {0x02 /* Number of parameters */,
+                           0x01 /* for TX ID 1 */, 0x00, 0x00, 0x00, 0x00,
+						   0x02 /* for TX ID 2 */, 0x00, 0x00, 0x00, 0x00};
+    /* TX_POWER[11]
+       [0]: Number of paramters
+       [1]: TX ID 1
+       [2][3]: TX_POWER_DELTA_PEAK for TX ID 1
+       [4][5]: TX_POWER_ID_RMS for TX ID 1
+       [6]: TX ID 2
+       [7][8]: TX_POWER_DELTA_PEAK for TX ID 2
+       [9][10]: TX_POWER_ID_RMS for TX ID 2
+    */
+    uint8_t CLK_ACCURACY[7] = { 0x03 /* Number of parameters */,
+    							0x00, 0x00 /* CAP1 */,
+								0x00, 0x00 /* CAP2 */,
+								0x00, 0x00 /* GM CURRNT CONTROL */};
+
+    int i;
+    for(i = 0; i < sizeof(channels); i++) {
+        channel = channels[i];
+        UwbApi_ReadOtpCalibDataCmd(channel, bitmask, &calib);
+        TX_POWER[4] = calib.TX_POWER_ID[0] + (2.1-0.6+0.5)*4;
+        TX_POWER[2] = calib.TX_POWER_ID[1];
+        UwbApi_SetCalibration(channel, TX_POWER_PER_ANTENNA, TX_POWER, sizeof(TX_POWER));
+    }
+
+    // XTAL_CAP
+    bitmask = (1<<2); // XTAL_CAP
+    UwbApi_ReadOtpCalibDataCmd(9, bitmask, &calib);    // channel 9 is dummy. not used for XTAL_CAP
+    CLK_ACCURACY[1] = calib.XTAL_CAP_VALUES[0];
+    CLK_ACCURACY[3] = calib.XTAL_CAP_VALUES[1];
+    CLK_ACCURACY[5] = calib.XTAL_CAP_VALUES[2];
+    UwbApi_SetCalibration(9, RF_CLK_ACCURACY_CALIB, CLK_ACCURACY, sizeof(CLK_ACCURACY));
+
     status = UwbApi_GetDeviceInfo(&devInfo);
     printDeviceInfo(&devInfo);
     if (status != UWBAPI_STATUS_OK) {
@@ -128,8 +173,8 @@ OSAL_TASK_RETURN_TYPE StandaloneTask(void *args)
         goto exit;
     }
 
-    /* Delay 5 Mins for Ranging MILLISECONDS = MINUTES * 60 * 1000 */
-    delay = 5 * 60 * 1000; /*Waiting for 5 mins*/
+    /* Delay 30 Mins for Ranging MILLISECONDS = MINUTES * 60 * 1000 */
+    delay = 30 * 60 * 1000; /*Waiting for 30 mins*/
 
     /* When Ranging is terminated due to inband termination this semaphore will
      * be signaled, otherwise ranging will be performed for the time specified */
diff --git demos/common/Demo_Common_Config.c demos/common/Demo_Common_Config.c
index 81306b5..1473e1b 100644
--- demos/common/Demo_Common_Config.c
+++ demos/common/Demo_Common_Config.c
@@ -113,7 +113,8 @@ tUWBAPI_STATUS demo_set_common_app_config(uint32_t sessionHandle, UWB_StsConfig_
 
 #if SET_ANTENNA_CONFIG
     const UWB_VendorAppParams_List_t SetVendorAppParamsList[] = {
-        UWB_SET_VENDOR_APP_PARAM_ARRAY(
+    		UWB_SET_VENDOR_APP_PARAM_VALUE(TX_ADAPTIVE_PAYLOAD_POWER, 1),
+    		UWB_SET_VENDOR_APP_PARAM_ARRAY(
             ANTENNAE_CONFIGURATION_RX, &antennaeConfigurationRx[0], sizeof(antennaeConfigurationRx)),
     };
 #endif // SET_ANTENNA_CONFIG
diff --git libs/uwb-iot/uwb_api/PrintUtility/PrintUtility.c libs/uwb-iot/uwb_api/PrintUtility/PrintUtility.c
index 5de9d02..8702830 100644
--- libs/uwb-iot/uwb_api/PrintUtility/PrintUtility.c
+++ libs/uwb-iot/uwb_api/PrintUtility/PrintUtility.c
@@ -126,7 +126,7 @@ EXTERNC void printRangingData(const phRangingData_t *pRangingData)
                 LOG_MAU8_D("pRangingData->range_meas.mac_addr        :", pRangingData->ranging_meas.range_meas_twr[i].mac_addr,(pRangingData->mac_addr_mode_indicator * 6) + 2);
                 NXPLOG_APP_D("TWR[%d].status          : %x ", i, pRangingData->ranging_meas.range_meas_twr[i].status);
                 if ((pRangingData->ranging_meas.range_meas_twr[i].status == UWBAPI_STATUS_OK) || (pRangingData->ranging_meas.range_meas_twr[i].status == UWBAPI_STATUS_OK_NEGATIVE_DISTANCE_REPORT)) {
-                    NXPLOG_APP_D("TWR[%d].nLos            : %hu", i, pRangingData->ranging_meas.range_meas_twr[i].nLos);
+                    NXPLOG_APP_I("TWR[%d].nLos            : %hu", i, pRangingData->ranging_meas.range_meas_twr[i].nLos);
 
                     /* This is a good thing to report... so keep it under INFO Tag. */
                     NXPLOG_APP_I("TWR[%" PRIu16 "].distance        : %" PRIu16 "", i, pRangingData->ranging_meas.range_meas_twr[i].distance);
@@ -134,9 +134,9 @@ EXTERNC void printRangingData(const phRangingData_t *pRangingData)
                         NXPLOG_APP_I("TWR[%" PRIu16 "]  Negative Distance Reported", i);
                     }
 
-                    NXPLOG_APP_D("TWR[%d].aoa_azimuth: %d.%d", i, TO_Q_9_7(pRangingData->ranging_meas.range_meas_twr[i].aoa_azimuth));
+                    NXPLOG_APP_I("TWR[%d].aoa_azimuth: %d.%d", i, TO_Q_9_7(pRangingData->ranging_meas.range_meas_twr[i].aoa_azimuth));
                     NXPLOG_APP_D("TWR[%d].aoa_azimuth_FOM       : %d", i, pRangingData->ranging_meas.range_meas_twr[i].aoa_azimuth_FOM);
-                    NXPLOG_APP_D("TWR[%d].aoa_elevation       : %d.%d", i, TO_Q_9_7(pRangingData->ranging_meas.range_meas_twr[i].aoa_elevation));
+                    NXPLOG_APP_I("TWR[%d].aoa_elevation       : %d.%d", i, TO_Q_9_7(pRangingData->ranging_meas.range_meas_twr[i].aoa_elevation));
                     NXPLOG_APP_D("TWR[%d].aoa_elevation_FOM      : %d", i, pRangingData->ranging_meas.range_meas_twr[i].aoa_elevation_FOM);
                     NXPLOG_APP_D("TWR[%d].aoa_dest_azimuth  : %d.%d", i, TO_Q_9_7(pRangingData->ranging_meas.range_meas_twr[i].aoa_dest_azimuth));
                     NXPLOG_APP_D("TWR[%d].aoa_dest_azimuth_FOM      : %d", i, pRangingData->ranging_meas.range_meas_twr[i].aoa_dest_azimuth_FOM);
diff --git libs/uwb-iot/uwb_api/PrintUtility/SR1XX/PrintUtility_Proprietary.c libs/uwb-iot/uwb_api/PrintUtility/SR1XX/PrintUtility_Proprietary.c
index 1ca99aa..e47a489 100644
--- libs/uwb-iot/uwb_api/PrintUtility/SR1XX/PrintUtility_Proprietary.c
+++ libs/uwb-iot/uwb_api/PrintUtility/SR1XX/PrintUtility_Proprietary.c
@@ -18,7 +18,7 @@
 EXTERNC void printDeviceInfo(const phUwbDevInfo_t *pdevInfo)
 {
     if (pdevInfo != NULL) {
-        NXPLOG_APP_D("UCI Generic Version            : %02X.%02X\n",
+        NXPLOG_APP_I("UCI Generic Version            : %02X.%02X\n",
             pdevInfo->uciGenericMajor,
             pdevInfo->uciGenericMinorMaintenanceVersion);
         NXPLOG_APP_D("MAC Version                    : %02X.%02X\n",
@@ -33,13 +33,13 @@ EXTERNC void printDeviceInfo(const phUwbDevInfo_t *pdevInfo)
             pdevInfo->fwMajor,
             pdevInfo->fwMinor,
             pdevInfo->fwRc);
-        NXPLOG_APP_D("NXP UCI Version                    : %02X.%02X.%02x\n",
+        NXPLOG_APP_I("NXP UCI Version                    : %02X.%02X.%02x\n",
             pdevInfo->nxpUciMajor,
             pdevInfo->nxpUciMinor,
             pdevInfo->nxpUciPatch);
         LOG_MAU8_D("NXP Chip ID                        :", pdevInfo->nxpChipId, sizeof(pdevInfo->nxpChipId));
 
-        NXPLOG_APP_D("Middleware Version                 : %02X.%02X.%02X\n",
+        NXPLOG_APP_I("Middleware Version                 : %02X.%02X.%02X\n",
             pdevInfo->mwMajor,
             pdevInfo->mwMinor,
             pdevInfo->mwRc);
